---------------------
   Initial outline
---------------------
Given the set of descriptions, output all possible layouts that fit the constraints
- constraint satisfaction based on all given descriptions
- aay have free variables/multiple possible valid results
- always contains the intended correct result

Input descriptions in succession and output the updated possible layouts after each additional constraint
- allow for input updating new relations
- most recent output of layouts fits all constraints given up to and including the most recently added one

Extras
- Parameters: error type, probability of error
- Error types: left/right or top/down switches, flips/rotations, ...
- Probability of error: alter layouts to reflect the given error type according to the given probability
- Throw error if constraint(s) are impossible to realize for any of the layouts up to date?


---------------------
  Update 4/16/2013
---------------------
More Ideas:
Use "relation" instead of "position"

Create class of positions
Methods to add the positions such as: Dog.leftOf(Cat)
For now, have relations be in straight lines (same column/row)
Position adding methods test the 'in same line' constraint separately for easy future removal

Have a nxn grid, where n is the total number of rooms, to incorporate all possible layouts
Maintain a grid for each room and block out impossible locations given the constraints
To get the final layout formation, overlay the grids and find the intersections.


---------------------
  Update 4/22/2013
---------------------
Classes: Room, Grid, Experiment

Room
- item: animal in it
- grid of possible locations for this room
- location of this room
	(commented out in code for now, unsure if needed)
- set neighbours by relations

Grid
- represents the nxn grid that can accomodate all possibilities for n total number of rooms
- represent invalid locations
- toString for easy testing and printing results

Experiment
- the "main" method
- generate list all possible grids/layouts

**Questions**
line 10: how to get grid size without making room keep track of total number of rooms 
(which seems inappropriate for abstraction concerns); some java static variable equivalent in python?














